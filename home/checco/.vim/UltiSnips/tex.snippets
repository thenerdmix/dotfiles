#defining the math context
global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

#DOCUMENT
snippet template "Basic template" b
\documentclass{article}
\usepackage{/home/checco/packs/general}

\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

#STRUCTURES
snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet table "Table" bA
\begin{table}[H]
	\centering
	\begin{tabular}{rrr}
		\toprule
		& & \\\
		\midrule
		& & \\\
		& & \\\
		\bottomrule
	\end{tabular}
\end{table}
endsnippet

snippet figure "Figure" bA
\begin{figure}[H]
	\centering
	\includegraphics[scale= 1]{$0}
	\caption{$1}
\end{figure}
endsnippet

#MATH STRUCTURES
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

#MATH OPERATIONS
##FRACTIONS
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet pd "Partial derivative" iA
\pdv{$1}{$2}$0
endsnippet

context "math()"
snippet norm "Norm" iA
\norm{$1}$0
endsnippet

context "math()"
snippet agg "Agg" iA
\agg{$1}$0
endsnippet

#MATH SYMBOLS
context "math()"
snippet sig "Sigma" iA
\sigma
endsnippet


#TEXT FORMAT
snippet bf "Bold text" i
\textbf{$1}$0
endsnippet

snippet it "Italic text" i
\textit{$1}$0
endsnippet

snippet un "Underline text" i
\underline{$1}$0
endsnippet

context "math()"
snippet tt "Text" i
\text{$1}$0
endsnippet

context "math()"
snippet _ "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^ "Superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet ra "Superscript" iA
\rightarrow $0
endsnippet

context "math()"
snippet sii "sii" i
\si{$1}$0
endsnippet

context "math()"
snippet si "si" i
\SI{$1}{$2}$0
endsnippet

#FISICACCIA
snippet pm "pm" iA
$\pm$ 
endsnippet

context "math()"
snippet vec "Vector" iA
\mathbf{$1}$0
endsnippet

#TEST
snippet /mysnip([a-z]*)/ "Optionals" r
this is always here!`!p
if "a" in match.group(1):
  snip += "only when a"
if "b" in match.group(1):
  snip += "only when b"`
endsnippet
#TEST
#TEST
